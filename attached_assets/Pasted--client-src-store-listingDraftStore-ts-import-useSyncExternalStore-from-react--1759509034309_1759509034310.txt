+// client/src/store/listingDraftStore.ts
+import { useSyncExternalStore } from "react";
+
+// 必要に応じて項目を足してください（ここを真実のソースにすると、プレビュー網羅が楽です）
+export type ListingDraft = {
+  // 基本
+  title: string;
+  category: "car" | "motorcycle" | "" ;
+  make: string;
+  model: string;
+  year: number | null;
+  mileage: number | null;
+  mileageVerified: boolean;
+  ownershipMileage: number | null;
+  locationText: string;
+  // 車両情報
+  displacementCc: number | null; // 排気量
+  transmission: string;
+  color: string;
+  vin: string; // フレームNo.
+  hasShaken: boolean;
+  shakenYear: string;
+  shakenMonth: string;
+  isTemporaryRegistration: boolean; // 一時抹消 など
+  // 記述系
+  description: string;
+  specifications: string;
+  condition: string;
+  highlights: string;
+  modifications: string;
+  maintenance: string;
+  knownIssues: string;
+  additionalInfo: string;
+  // メディア
+  images: string[];       // URL配列想定
+  videoUrl: string;
+  // 価格/オークション
+  reservePrice: number | null;
+  buyNowPrice: number | null;
+  auctionStartAt: string; // ISO文字列 or yyyy-MM-ddTHH:mm
+  auctionEndAt: string;
+};
+
+const INITIAL_DRAFT: ListingDraft = {
+  title: "",
+  category: "",
+  make: "",
+  model: "",
+  year: null,
+  mileage: null,
+  mileageVerified: false,
+  ownershipMileage: null,
+  locationText: "",
+  displacementCc: null,
+  transmission: "",
+  color: "",
+  vin: "",
+  hasShaken: false,
+  shakenYear: "",
+  shakenMonth: "",
+  isTemporaryRegistration: false,
+  description: "",
+  specifications: "",
+  condition: "",
+  highlights: "",
+  modifications: "",
+  maintenance: "",
+  knownIssues: "",
+  additionalInfo: "",
+  images: [],
+  videoUrl: "",
+  reservePrice: null,
+  buyNowPrice: null,
+  auctionStartAt: "",
+  auctionEndAt: "",
+};
+
+// --- 超軽量グローバルストア（依存0） -------------------------
+type Listener = () => void;
+let draft: ListingDraft = (() => {
+  try {
+    const raw = sessionStorage.getItem("listing:draft");
+    return raw ? { ...INITIAL_DRAFT, ...JSON.parse(raw) } : INITIAL_DRAFT;
+  } catch {
+    return INITIAL_DRAFT;
+  }
+})();
+const listeners = new Set<Listener>();
+
+function emit() {
+  try {
+    sessionStorage.setItem("listing:draft", JSON.stringify(draft));
+  } catch {}
+  for (const l of listeners) l();
+}
+
+function subscribe(l: Listener) {
+  listeners.add(l);
+  return () => listeners.delete(l);
+}
+function getSnapshot() {
+  return draft;
+}
+function getServerSnapshot() {
+  return INITIAL_DRAFT; // SSR想定なし
+}
+
+export function setAll(next: Partial<ListingDraft> | ListingDraft) {
+  draft = { ...draft, ...(next as ListingDraft) };
+  emit();
+}
+export function setField<K extends keyof ListingDraft>(key: K, value: ListingDraft[K]) {
+  draft = { ...draft, [key]: value };
+  emit();
+}
+export function clearDraft() {
+  draft = INITIAL_DRAFT;
+  emit();
+}
+
+export function useListingDraftStore() {
+  const data = useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
+  return {
+    draft: data,
+    setAll,
+    setField,
+    clearDraft,
+  };
+}
