import express, { type Express, Response as ExpressResponse } from "express";
import { createServer, type Server } from "http";
import multer from "multer";
import path from "path";
import fs from "fs";
import { storage } from "./storage";
import { setupAuth, isAuthenticated } from "./replitAuth";
import { ObjectStorageService, ObjectNotFoundError } from "./objectStorage";
import { ObjectPermission } from "./objectAcl";
import { z } from "zod";
import { insertListingSchema, insertBidSchema, insertCommentSchema } from "@shared/schema";
import rateLimit from "express-rate-limit";
import { demoBiddingBot } from "./demoBot";
import { emailService } from "./emailService";

// Multer configuration for temporary file uploads
const uploadDir = path.join(process.cwd(), 'uploads');
if (!fs.existsSync(uploadDir)) {
  fs.mkdirSync(uploadDir, { recursive: true });
}

const upload = multer({
  storage: multer.diskStorage({
    destination: uploadDir,
    filename: (req, file, cb) => {
      const uniqueName = `${Date.now()}_${Math.random().toString(36).substring(2)}_${file.originalname}`;
      cb(null, uniqueName);
    }
  }),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB limit
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed'));
    }
  }
});

// Rate limiters
const bidRateLimit = rateLimit({
  windowMs: 60 * 1000, // 1 minute
  max: 10, // 10 bids per minute
  message: { error: "入札が多すぎます。しばらく待ってからお試しください。" },
  standardHeaders: true,
  legacyHeaders: false,
});

const commentRateLimit = rateLimit({
  windowMs: 60 * 1000, // 1 minute  
  max: 5, // 5 comments per minute
  message: { error: "コメントが多すぎます。しばらく待ってからお試しください。" },
  standardHeaders: true,
  legacyHeaders: false,
});

// SSE connections store
const sseConnections = new Map<string, Set<ExpressResponse>>();

// Export for use in demo bot
export function broadcastToSSE(listingId: string, data: any) {
  const connections = sseConnections.get(listingId);
  if (!connections) return;
  
  const message = `data: ${JSON.stringify(data)}\n\n`;
  connections.forEach((res) => {
    try {
      (res as any).write(message);
    } catch (error) {
      console.error("Error broadcasting to SSE client:", error);
      connections.delete(res);
    }
  });
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Auth middleware
  await setupAuth(app);

  // Auth routes
  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {
    try {
      const userId = (req.user as any)?.claims?.sub;
      const user = await storage.getUser(userId);
      res.json(user);
    } catch (error) {
      console.error("Error fetching user:", error);
      res.status(500).json({ message: "Failed to fetch user" });
    }
  });

  // Object storage routes for both public and protected files
  app.get("/objects/:objectPath(*)", async (req: any, res) => {
    const userId = (req.user as any)?.claims?.sub; // May be undefined for non-authenticated requests
    const objectStorageService = new ObjectStorageService();
    try {
      // First try to find the object in public search paths (no auth required)
      const filePath = req.params.objectPath;
      let objectFile = await objectStorageService.searchPublicObject(filePath);
      
      if (objectFile) {
        // Public object found, serve it directly
        return objectStorageService.downloadObject(objectFile, res);
      }
      
      // If not found in public paths, try private storage with auth
      objectFile = await objectStorageService.getObjectEntityFile(req.path);
      const canAccess = await objectStorageService.canAccessObjectEntity({
        objectFile,
        userId: userId,
        requestedPermission: ObjectPermission.READ,
      });
      if (!canAccess) {
        return res.sendStatus(401);
      }
      return objectStorageService.downloadObject(objectFile, res);
    } catch (error) {
      console.error("Error checking object access:", error);
      if (error instanceof ObjectNotFoundError) {
        return res.sendStatus(404);
      }
      return res.sendStatus(500);
    }
  });

  app.post("/api/objects/upload", isAuthenticated, async (req, res) => {
    try {
      const objectStorageService = new ObjectStorageService();
      const uploadURL = await objectStorageService.getObjectEntityUploadURL();
      res.json({ uploadURL });
    } catch (error: any) {
      console.error("Error getting upload URL:", error);
      // Generate a temporary local upload URL as fallback
      const tempUploadId = `temp_${Date.now()}_${Math.random().toString(36).substring(2)}`;
      res.json({ 
        uploadURL: `/api/temp-upload/${tempUploadId}`,
        isTempUpload: true 
      });
    }
  });

  // Serve uploaded files statically
  app.use('/uploads', express.static(uploadDir));

  // Temporary upload endpoint for when object storage fails
  app.put('/api/temp-upload/:uploadId', upload.single('file'), (req: any, res) => {
    if (!req.file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    const fileUrl = `/uploads/${req.file.filename}`;
    res.json({ 
      uploadURL: fileUrl,
      filename: req.file.filename,
      originalname: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size
    });
  });

  // Direct file upload endpoint for reliable image uploads
  app.post('/api/upload-image', isAuthenticated, upload.single('image'), (req: any, res) => {
    if (!req.file) {
      return res.status(400).json({ error: 'No file uploaded' });
    }

    const fileUrl = `/uploads/${req.file.filename}`;
    res.json({ 
      url: fileUrl,
      filename: req.file.filename,
      originalname: req.file.originalname,
      mimetype: req.file.mimetype,
      size: req.file.size
    });
  });

  app.put("/api/listing-images", isAuthenticated, async (req: any, res) => {
    if (!req.body.imageURL) {
      return res.status(400).json({ error: "imageURL is required" });
    }

    const userId = (req.user as any)?.claims?.sub;

    try {
      // Check if this is a temporary upload (local file)
      if (req.body.imageURL.startsWith('/uploads/')) {
        // For temporary uploads, just return the URL as-is since they're already publicly accessible
        res.status(200).json({ objectPath: req.body.imageURL });
        return;
      }

      // For object storage uploads, try the normal ACL process
      const objectStorageService = new ObjectStorageService();
      const objectPath = await objectStorageService.trySetObjectEntityAclPolicy(
        req.body.imageURL,
        {
          owner: userId,
          visibility: "public", // Vehicle photos should be publicly accessible
        },
      );

      res.status(200).json({ objectPath });
    } catch (error) {
      console.error("Error setting listing image:", error);
      res.status(500).json({ error: "Internal server error" });
    }
  });

  // Listings routes
  app.get("/api/listings", async (req: any, res) => {
    try {
      const { status = "published", category, sort = "endingSoon", limit = "20", offset = "0" } = req.query;
      
      const filters = {
        status: status as string,
        category: category as string | undefined,
        sortBy: sort as "endingSoon" | "newest" | "highestPrice",
        limit: parseInt(limit as string),
        offset: parseInt(offset as string),
      };
      
      const listings = await storage.getListings(filters);
      res.json(listings);
    } catch (error) {
      console.error("Error fetching listings:", error);
      res.status(500).json({ error: "Failed to fetch listings" });
    }
  });

  app.get("/api/listings/:idOrSlug", async (req: any, res) => {
    try {
      const { idOrSlug } = req.params;
      console.log("Fetching listing with idOrSlug:", idOrSlug);
      let listing;
      
      // Check if it looks like a UUID (has multiple hyphens in UUID format)
      const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
      
      if (uuidPattern.test(idOrSlug)) {
        console.log("Searching by UUID ID:", idOrSlug);
        listing = await storage.getListingById(idOrSlug);
      } else {
        console.log("Searching by slug:", idOrSlug);
        listing = await storage.getListingBySlug(idOrSlug);
        if (!listing) {
          console.log("Not found by slug, trying ID:", idOrSlug);
          listing = await storage.getListingById(idOrSlug);
        }
      }
      
      if (!listing) {
        console.log("Listing not found for idOrSlug:", idOrSlug);
        return res.status(404).json({ error: "オークションが見つかりません" });
      }
      console.log("Found listing:", listing.id, listing.title);
      res.json(listing);
    } catch (error) {
      console.error("Error fetching listing:", error);
      res.status(500).json({ error: "Failed to fetch listing" });
    }
  });

  // Temporary endpoint without authentication for testing
  app.post("/api/listings/test", async (req, res) => {
    console.log("=== TEST ENDPOINT HIT ===");
    res.setHeader('Content-Type', 'application/json');
    try {
      const userId = "46383243"; // Use your actual user ID for testing
      
      console.log("TEST: Creating listing with user ID:", userId);
      console.log("TEST: Raw request body:", JSON.stringify(req.body, null, 2));
      
      // Convert string fields to proper types and add photos from uploaded photos
      const processedData = {
        ...req.body,
        sellerId: userId, // Set sellerId first
        year: typeof req.body.year === 'string' ? parseInt(req.body.year, 10) : req.body.year,
        mileage: typeof req.body.mileage === 'string' ? parseInt(req.body.mileage, 10) : req.body.mileage,
        ownershipMileage: req.body.ownershipMileage && req.body.ownershipMileage !== '' 
          ? (typeof req.body.ownershipMileage === 'string' ? parseInt(req.body.ownershipMileage, 10) : req.body.ownershipMileage)
          : null,
        startingPrice: typeof req.body.startingPrice === 'string' ? req.body.startingPrice : req.body.startingPrice?.toString(),
        reservePrice: req.body.reservePrice && req.body.reservePrice !== '' 
          ? (typeof req.body.reservePrice === 'string' ? req.body.reservePrice : req.body.reservePrice?.toString())
          : null,
        startAt: req.body.startAt ? new Date(req.body.startAt) : new Date(Date.now() + 24 * 60 * 60 * 1000),
        endAt: req.body.endAt ? new Date(req.body.endAt) : new Date(Date.now() + 8 * 24 * 60 * 60 * 1000),
        photos: req.body.photos || [], // Ensure photos array exists
      };
      
      console.log("TEST: Processed data:", JSON.stringify(processedData, null, 2));
      
      const validatedData = insertListingSchema.parse(processedData);
      console.log("TEST: Validated data:", JSON.stringify(validatedData, null, 2));
      
      const listing = await storage.createListing(validatedData, userId);
      console.log("TEST: Created listing:", listing.id);
      
      // Return the listing with photos included
      const listingWithPhotos = await storage.getListingById(listing.id);
      res.status(201).json(listingWithPhotos);
    } catch (error: any) {
      console.error("TEST: Error creating listing:", error);
      
      if (error.issues) {
        return res.status(400).json({
          error: "Invalid data",
          details: error.issues.map((issue: any) => ({
            code: issue.code,
            path: issue.path,
            message: issue.message,
          })),
        });
      }
      
      res.status(500).json({ error: "Failed to create listing" });
    }
  });

  app.post("/api/listings", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub || req.user?.id;
      
      console.log("User ID:", userId);
      console.log("User object:", req.user);
      
      if (!userId) {
        console.error("User ID is undefined. User object:", req.user);
        return res.status(401).json({ error: "ユーザーIDが取得できません" });
      }
      
      console.log("Raw request body:", JSON.stringify(req.body, null, 2));
      
      // Convert string fields to proper types and add photos from uploaded photos
      const processedData = {
        ...req.body,
        sellerId: userId, // Set sellerId first
        year: typeof req.body.year === 'string' ? parseInt(req.body.year, 10) : req.body.year,
        mileage: typeof req.body.mileage === 'string' ? parseInt(req.body.mileage, 10) : req.body.mileage,
        ownershipMileage: req.body.ownershipMileage && req.body.ownershipMileage !== '' 
          ? (typeof req.body.ownershipMileage === 'string' ? parseInt(req.body.ownershipMileage, 10) : req.body.ownershipMileage)
          : null,
        startingPrice: typeof req.body.startingPrice === 'string' ? req.body.startingPrice : req.body.startingPrice?.toString(),
        reservePrice: req.body.reservePrice && req.body.reservePrice !== '' 
          ? (typeof req.body.reservePrice === 'string' ? req.body.reservePrice : req.body.reservePrice?.toString())
          : null,
        startAt: req.body.startAt ? new Date(req.body.startAt) : undefined,
        endAt: req.body.endAt ? new Date(req.body.endAt) : undefined,
        photos: req.body.photos || [], // Ensure photos array exists
      };
      
      console.log("Processed data:", JSON.stringify(processedData, null, 2));
      
      console.log("About to validate data:", JSON.stringify(processedData, null, 2));
      const validatedData = insertListingSchema.parse(processedData);
      console.log("Validated data successful");
      
      const listing = await storage.createListing(validatedData, userId);
      console.log("Listing created successfully:", listing.id);
      
      // Create photo records if photos were provided
      if (req.body.photos && req.body.photos.length > 0) {
        await Promise.all(
          req.body.photos.map(async (photoUrl: string, index: number) => {
            await storage.createPhoto({
              listingId: listing.id,
              url: photoUrl,
              sortOrder: index,
            });
          })
        );
      }
      
      await storage.logAction({
        actorId: userId,
        action: "listing_created",
        entity: "listing",
        entityId: listing.id,
      });

      // Return the listing with photos included
      const listingWithPhotos = await storage.getListingById(listing.id);
      res.status(201).json(listingWithPhotos);
    } catch (error: any) {
      console.error("Error creating listing:", error);
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to create listing" });
    }
  });

  app.put("/api/listings/:id", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const listing = await storage.getListingById(req.params.id);
      
      if (!listing) {
        return res.status(404).json({ error: "オークションが見つかりません" });
      }
      
      // Only seller or admin can update
      if (listing.sellerId !== userId && req.user?.claims?.role !== "admin") {
        return res.status(403).json({ error: "このオークションを編集する権限がありません" });
      }

      const validatedData = insertListingSchema.partial().parse(req.body);
      const updated = await storage.updateListing(req.params.id, validatedData);
      
      await storage.logAction({
        actorId: userId,
        action: "listing_updated",
        entity: "listing",
        entityId: req.params.id,
      });

      res.json(updated);
    } catch (error) {
      console.error("Error updating listing:", error);
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to update listing" });
    }
  });

  // Bidding routes
  app.post("/api/bid", [isAuthenticated, bidRateLimit], async (req: any, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const { listingId, amount } = req.body;

      if (!listingId || !amount) {
        return res.status(400).json({ error: "listingId and amount are required" });
      }

      const listing = await storage.getListingById(listingId);
      if (!listing) {
        return res.status(404).json({ error: "オークションが見つかりません" });
      }

      if (listing.status !== "published") {
        return res.status(400).json({ error: "このオークションは現在入札を受け付けていません" });
      }

      if (new Date() > new Date(listing.endAt)) {
        return res.status(400).json({ error: "このオークションは終了しています" });
      }

      // Allow bidding on own listings for testing purposes (admin can test)
      // if (listing.sellerId === userId) {
      //   return res.status(400).json({ error: "自分の出品には入札できません" });
      // }

      // ヤフオクスタイルの入札増額ルールを取得
      const bidIncrementSetting = await storage.getSetting("bid_increments");
      const bidIncrements = bidIncrementSetting?.valueJson || [
        { maxPrice: 1000, increment: 10 },
        { maxPrice: 5000, increment: 50 },
        { maxPrice: 10000, increment: 100 },
        { maxPrice: 50000, increment: 250 },
        { maxPrice: 100000, increment: 500 },
        { maxPrice: 500000, increment: 1000 },
        { maxPrice: 1000000, increment: 2500 },
        { maxPrice: 5000000, increment: 5000 },
        { maxPrice: null, increment: 10000 },
      ];

      // Calculate minimum bid
      const currentPrice = parseFloat(listing.currentPrice);
      const increment = bidIncrements.find((rule: any) => 
        rule.maxPrice === null || currentPrice < rule.maxPrice
      )?.increment || 50000;

      const minBid = currentPrice + increment;

      if (parseFloat(amount) < minBid) {
        return res.status(400).json({ 
          error: `最低入札額は ¥${minBid.toLocaleString()} です (¥${increment.toLocaleString()} 刻み)` 
        });
      }

      // Get current highest bid to check for outbid notifications
      const previousHighestBid = await storage.getHighestBidForListing(listingId);
      
      // Use transaction for atomic bid placement with proxy bidding
      const bid = await storage.placeBid({
        listingId,
        bidderId: userId,
        amount: amount.toString(),
        maxBidAmount: amount.toString(), // ユーザーが入力した金額を最大入札額として使用
      });

      // Check if we need to extend auction (soft close)
      const now = new Date();
      const endAt = new Date(listing.endAt);
      const softCloseWindow = parseInt(process.env.SOFT_CLOSE_WINDOW_SEC || "120") * 1000;
      const maxExtensions = parseInt(process.env.SOFT_CLOSE_MAX_EXTENSIONS || "10");

      if (endAt.getTime() - now.getTime() < softCloseWindow && listing.extensionCount < maxExtensions) {
        await storage.extendAuction(listingId, Math.floor(softCloseWindow / 60000));
      }

      await storage.logAction({
        actorId: userId,
        action: "bid_placed",
        entity: "listing",
        entityId: listingId,
        metaJson: { amount, bidId: bid.id },
      });

      // Send email notifications
      try {
        const bidderUser = await storage.getUser(userId);
        const sellerUser = await storage.getUser(listing.sellerId);

        if (bidderUser?.email) {
          // Send bid confirmation to bidder
          await emailService.sendBidConfirmation(bidderUser.email, listing, bid);
        }

        if (sellerUser?.email) {
          // Send new bid notification to seller
          await emailService.sendNewBidNotification(
            sellerUser.email, 
            listing, 
            bid, 
            bidderUser?.email || 'anonymous'
          );
        }

        // Send outbid notification to previous highest bidder
        if (previousHighestBid && previousHighestBid.bidderId !== userId) {
          const previousBidderUser = await storage.getUser(previousHighestBid.bidderId);
          if (previousBidderUser?.email) {
            await emailService.sendOutbidNotification(
              previousBidderUser.email,
              listing,
              previousHighestBid,
              bid
            );
          }
        }
      } catch (emailError) {
        console.error('Email notification error:', emailError);
        // Don't fail the bid if email fails
      }

      // Broadcast to SSE clients
      broadcastToSSE(listingId, {
        type: "bid", 
        data: {
          amount: amount,
          bidder: "anonymous", 
          timestamp: bid.createdAt,
        },
      });

      res.status(201).json(bid);
    } catch (error) {
      console.error("Error placing bid:", error);
      res.status(500).json({ error: "Failed to place bid" });
    }
  });

  app.get("/api/listings/:id/bids", async (req, res) => {
    try {
      const bids = await storage.getBidsByListingId(req.params.id);
      res.json(bids);
    } catch (error) {
      console.error("Error fetching bids:", error);
      res.status(500).json({ error: "Failed to fetch bids" });
    }
  });

  // Comments routes
  app.post("/api/comments", [isAuthenticated, commentRateLimit], async (req: any, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const validatedData = insertCommentSchema.parse({
        ...req.body,
        authorId: userId,
      });

      // Simple spam filter
      const forbiddenWords = ["spam", "fake", "scam"];
      const containsForbiddenWords = forbiddenWords.some(word => 
        validatedData.body.toLowerCase().includes(word)
      );

      if (containsForbiddenWords) {
        return res.status(400).json({ error: "コメントに不適切な内容が含まれています" });
      }

      const comment = await storage.addComment(validatedData);
      res.status(201).json(comment);
    } catch (error) {
      console.error("Error creating comment:", error);
      if (error instanceof z.ZodError) {
        return res.status(400).json({ error: "Invalid data", details: error.errors });
      }
      res.status(500).json({ error: "Failed to create comment" });
    }
  });

  app.get("/api/listings/:id/comments", async (req, res) => {
    try {
      const comments = await storage.getCommentsByListingId(req.params.id);
      res.json(comments);
    } catch (error) {
      console.error("Error fetching comments:", error);
      res.status(500).json({ error: "Failed to fetch comments" });
    }
  });

  // Test email endpoint
  app.post('/api/test-email', async (req, res) => {
    try {
      const { to, subject } = req.body;
      const testHtml = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #333;">ClassicAuction テストメール</h2>
          <p>メール通知システムが正常に動作しています。</p>
          <p>送信時刻: ${new Date().toLocaleString('ja-JP')}</p>
          <hr>
          <p style="font-size: 12px; color: #666;">このメールはClassicAuctionのテスト送信です。</p>
        </div>
      `;
      
      const success = await emailService.sendEmail({
        to: to || 'matsubaryosuke@gmail.com',
        subject: subject || 'ClassicAuction テストメール',
        html: testHtml
      });
      
      res.json({ 
        success,
        message: success ? 'Test email sent successfully' : 'Failed to send test email',
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('Test email error:', error);
      res.status(500).json({ error: 'Test email failed', details: error.message });
    }
  });

  // Watch list routes
  app.post("/api/watch", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const { listingId } = req.body;

      if (!listingId) {
        return res.status(400).json({ error: "listingId is required" });
      }

      const watch = await storage.addToWatchList({ listingId, userId });
      res.status(201).json(watch);
    } catch (error) {
      console.error("Error adding to watch list:", error);
      res.status(500).json({ error: "Failed to add to watch list" });
    }
  });

  app.delete("/api/watch/:listingId", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      await storage.removeFromWatchList(req.params.listingId, userId);
      res.status(204).send();
    } catch (error) {
      console.error("Error removing from watch list:", error);
      res.status(500).json({ error: "Failed to remove from watch list" });
    }
  });

  app.get("/api/watch", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const watchList = await storage.getWatchListByUserId(userId);
      res.json(watchList);
    } catch (error) {
      console.error("Error fetching watch list:", error);
      res.status(500).json({ error: "Failed to fetch watch list" });
    }
  });

  app.get("/api/watch/:listingId/status", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const isWatching = await storage.isWatching(req.params.listingId, userId);
      res.json({ isWatching });
    } catch (error) {
      console.error("Error checking watch status:", error);
      res.status(500).json({ error: "Failed to check watch status" });
    }
  });

  // Admin routes
  app.get("/api/admin/listings", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const user = await storage.getUser(userId);
      
      if (!user || user.role !== "admin") {
        return res.status(403).json({ error: "管理者権限が必要です" });
      }

      const { status } = req.query;
      const listings = await storage.getListingsForAdmin(status as string);
      res.json(listings);
    } catch (error) {
      console.error("Error fetching admin listings:", error);
      res.status(500).json({ error: "Failed to fetch listings" });
    }
  });

  app.post("/api/admin/listing/:id/approve", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const user = await storage.getUser(userId);
      
      if (!user || user.role !== "admin") {
        return res.status(403).json({ error: "管理者権限が必要です" });
      }

      await storage.updateListingStatus(req.params.id, "approved", userId);
      res.json({ success: true });
    } catch (error) {
      console.error("Error approving listing:", error);
      res.status(500).json({ error: "Failed to approve listing" });
    }
  });

  app.post("/api/admin/listing/:id/reject", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const user = await storage.getUser(userId);
      
      if (!user || user.role !== "admin") {
        return res.status(403).json({ error: "管理者権限が必要です" });
      }

      await storage.updateListingStatus(req.params.id, "rejected", userId);
      res.json({ success: true });
    } catch (error) {
      console.error("Error rejecting listing:", error);
      res.status(500).json({ error: "Failed to reject listing" });
    }
  });

  // Admin schedule setting
  app.put("/api/admin/listings/:id/schedule", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const user = await storage.getUser(userId);
      
      if (!user || user.role !== "admin") {
        return res.status(403).json({ error: "管理者権限が必要です" });
      }

      const { startAt, endAt } = req.body;
      const listingId = req.params.id;

      if (!startAt || !endAt) {
        return res.status(400).json({ error: "開始・終了時間が必要です" });
      }

      const startTime = new Date(startAt);
      const endTime = new Date(endAt);

      if (startTime >= endTime) {
        return res.status(400).json({ error: "終了時間は開始時間より後にしてください" });
      }

      const updatedListing = await storage.updateListingSchedule(listingId, startTime, endTime);

      await storage.logAction({
        actorId: userId,
        action: "listing_scheduled",
        entity: "listing",
        entityId: listingId,
      });

      res.json(updatedListing);
    } catch (error) {
      console.error("Admin schedule setting error:", error);
      res.status(500).json({ error: "スケジュール設定に失敗しました" });
    }
  });

  app.post("/api/admin/listing/:id/publish", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const user = await storage.getUser(userId);
      
      if (!user || user.role !== "admin") {
        return res.status(403).json({ error: "管理者権限が必要です" });
      }

      await storage.updateListingStatus(req.params.id, "published", userId);
      res.json({ success: true });
    } catch (error) {
      console.error("Error publishing listing:", error);
      res.status(500).json({ error: "Failed to publish listing" });
    }
  });

  app.post("/api/admin/listing/:id/end", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const user = await storage.getUser(userId);
      
      if (!user || user.role !== "admin") {
        return res.status(403).json({ error: "管理者権限が必要です" });
      }
      const listing = await storage.getListingById(req.params.id);
      if (!listing) {
        return res.status(404).json({ error: "オークションが見つかりません" });
      }

      const highestBid = await storage.getHighestBidForListing(req.params.id);
      const hasMetReserve = !listing.reservePrice || 
        (highestBid && parseFloat(highestBid.amount) >= parseFloat(listing.reservePrice));

      await storage.closeAuction(
        req.params.id, 
        hasMetReserve ? highestBid?.bidderId : undefined
      );

      // Send email notifications for manual auction completion
      if (hasMetReserve && highestBid) {
        try {
          const winner = await storage.getUser(highestBid.bidderId);
          const seller = await storage.getUser(listing.sellerId);

          if (winner?.email && seller?.email) {
            // Send winning notification to winner with seller contact info
            await emailService.sendWinningNotification(
              winner.email,
              listing,
              highestBid,
              seller
            );

            // Send auction end notification to seller with winner contact info
            await emailService.sendAuctionEndNotification(
              seller.email,
              listing,
              highestBid,
              winner.email
            );
          }
        } catch (emailError) {
          console.error('Manual auction completion email error:', emailError);
        }
      }

      await storage.logAction({
        actorId: userId,
        action: "listing_force_ended",
        entity: "listing",
        entityId: req.params.id,
      });

      res.json({ success: true });
    } catch (error) {
      console.error("Error ending listing:", error);
      res.status(500).json({ error: "Failed to end listing" });
    }
  });

  app.delete("/api/admin/listing/:id", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const user = await storage.getUser(userId);
      
      if (!user || user.role !== "admin") {
        return res.status(403).json({ error: "管理者権限が必要です" });
      }

      // This would need to be implemented in storage
      res.status(501).json({ error: "Not implemented" });
    } catch (error) {
      console.error("Error deleting listing:", error);
      res.status(500).json({ error: "Failed to delete listing" });
    }
  });

  app.get("/api/admin/dashboard", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const user = await storage.getUser(userId);
      
      if (!user || user.role !== "admin") {
        return res.status(403).json({ error: "管理者権限が必要です" });
      }

      const stats = await storage.getDashboardStats();
      res.json(stats);
    } catch (error) {
      console.error("Error fetching dashboard stats:", error);
      res.status(500).json({ error: "Failed to fetch dashboard stats" });
    }
  });

  app.post("/api/admin/comment/:id/hide", isAuthenticated, async (req, res) => {
    try {
      const userId = req.user?.claims?.sub;
      const user = await storage.getUser(userId);
      
      if (!user || user.role !== "admin") {
        return res.status(403).json({ error: "管理者権限が必要です" });
      }
      await storage.hideComment(req.params.id, userId);
      res.json({ success: true });
    } catch (error) {
      console.error("Error hiding comment:", error);
      res.status(500).json({ error: "Failed to hide comment" });
    }
  });

  // SSE route for real-time updates
  app.get("/api/stream/auction/:id", (req, res) => {
    const listingId = req.params.id;
    
    res.writeHead(200, {
      "Content-Type": "text/event-stream",
      "Cache-Control": "no-cache",
      "Connection": "keep-alive",
      "Access-Control-Allow-Origin": "*",
    });

    // Add connection to the set for this listing
    if (!sseConnections.has(listingId)) {
      sseConnections.set(listingId, new Set());
    }
    sseConnections.get(listingId)!.add(res);

    // Send keep-alive
    const keepAlive = setInterval(() => {
      res.write("event: ping\ndata: {}\n\n");
    }, 30000);

    // Clean up on disconnect
    req.on("close", () => {
      clearInterval(keepAlive);
      const connections = sseConnections.get(listingId);
      if (connections) {
        connections.delete(res);
        if (connections.size === 0) {
          sseConnections.delete(listingId);
        }
      }
    });
  });

  // Internal cron endpoint
  app.get("/api/cron/close-expired", async (req, res) => {
    try {
      const expiredAuctions = await storage.getExpiredAuctions();
      
      for (const auction of expiredAuctions) {
        const highestBid = await storage.getHighestBidForListing(auction.id);
        const hasMetReserve = !auction.reservePrice || 
          (highestBid && parseFloat(highestBid.amount) >= parseFloat(auction.reservePrice));

        await storage.closeAuction(
          auction.id,
          hasMetReserve ? highestBid?.bidderId : undefined
        );

        // Send email notifications for auction completion
        if (hasMetReserve && highestBid) {
          try {
            const winner = await storage.getUser(highestBid.bidderId);
            const seller = await storage.getUser(auction.sellerId);

            if (winner?.email && seller?.email) {
              // Send winning notification to winner with seller contact info
              await emailService.sendWinningNotification(
                winner.email,
                auction,
                highestBid,
                seller
              );

              // Send auction end notification to seller with winner contact info
              await emailService.sendAuctionEndNotification(
                seller.email,
                auction,
                highestBid,
                winner.email
              );
            }
          } catch (emailError) {
            console.error('Auction completion email error:', emailError);
          }
        }

        // Broadcast closure to SSE clients
        broadcastToSSE(auction.id, {
          type: "auction_ended",
          data: {
            status: hasMetReserve ? "sold" : "unsold",
            winningBid: hasMetReserve ? highestBid?.amount : null,
          },
        });
      }

      res.json({ processed: expiredAuctions.length });
    } catch (error) {
      console.error("Error processing expired auctions:", error);
      res.status(500).json({ error: "Failed to process expired auctions" });
    }
  });

  // Get bidder profile with bid and comment history
  app.get("/api/users/:userId/profile", async (req, res) => {
    try {
      const { userId } = req.params;
      
      const profile = await storage.getBidderProfile(userId);
      
      if (!profile) {
        return res.status(404).json({ error: "User not found" });
      }

      res.json(profile);
    } catch (error) {
      console.error("Error fetching bidder profile:", error);
      res.status(500).json({ error: "Failed to fetch bidder profile" });
    }
  });

  // Sitemap
  app.get("/sitemap.xml", async (req, res) => {
    try {
      const listings = await storage.getListings({ status: "published", limit: 1000 });
      
      const urls = [
        { loc: "/", changefreq: "daily", priority: "1.0" },
        ...listings.map(listing => ({
          loc: `/listing/${listing.slug}`,
          changefreq: "hourly",
          priority: "0.8",
          lastmod: listing.updatedAt?.toISOString().split('T')[0],
        })),
      ];

      const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
${urls.map(url => `  <url>
    <loc>https://${req.hostname}${url.loc}</loc>
    <changefreq>${url.changefreq}</changefreq>
    <priority>${url.priority}</priority>
    ${url.lastmod ? `<lastmod>${url.lastmod}</lastmod>` : ''}
  </url>`).join('\n')}
</urlset>`;

      res.set('Content-Type', 'application/xml');
      res.send(sitemap);
    } catch (error) {
      console.error("Error generating sitemap:", error);
      res.status(500).send("Error generating sitemap");
    }
  });

  // Robots.txt
  app.get("/robots.txt", (req, res) => {
    const robotsTxt = `User-agent: *
Allow: /
Sitemap: https://${req.hostname}/sitemap.xml`;
    res.set('Content-Type', 'text/plain');
    res.send(robotsTxt);
  });

  // Demo routes for testing
  app.post("/api/demo/start-bidding", async (req, res) => {
    demoBiddingBot.start();
    res.json({ message: "Demo bidding bot started" });
  });

  app.post("/api/demo/stop-bidding", async (req, res) => {
    demoBiddingBot.stop();
    res.json({ message: "Demo bidding bot stopped" });
  });

  // Start demo bot automatically for testing
  setTimeout(() => {
    demoBiddingBot.start();
    console.log("🚀 Demo bidding bot started automatically");
  }, 5000);

  const httpServer = createServer(app);

  return httpServer;
}


