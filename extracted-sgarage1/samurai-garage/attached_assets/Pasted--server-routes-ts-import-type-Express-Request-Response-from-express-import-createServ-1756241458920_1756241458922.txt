// server/routes.ts
import type { Express, Request, Response } from "express";
import { createServer } from "http";
import fs from "node:fs";
import path from "node:path";

type VehicleIndex = {
  car: Record<string, Record<string, string[]>>;
  motorcycle: Record<string, Record<string, string[]>>;
};

const DATA_PATH = path.resolve(import.meta.dirname, "..", "attached_assets", "vehicle-index.json");

// 起動時に1回だけ読み込み
function loadIndex(): VehicleIndex {
  try {
    const raw = fs.readFileSync(DATA_PATH, "utf8");
    const parsed = JSON.parse(raw);
    // 最低限の型チェック
    if (!parsed.car || !parsed.motorcycle) throw new Error("invalid root keys");
    return parsed as VehicleIndex;
  } catch (e) {
    console.error("[vehicle-index] failed to load:", e);
    return { car: {}, motorcycle: {} };
  }
}

const INDEX = loadIndex();

function assertCategory(c?: string): c is keyof VehicleIndex {
  return c === "car" || c === "motorcycle";
}

// クエリ: /api/makes?category=car
function handleGetMakes(req: Request, res: Response) {
  const cat = String(req.query.category || "");
  if (!assertCategory(cat)) return res.status(400).json({ message: "category must be 'car' or 'motorcycle'" });
  const makes = Object.keys(INDEX[cat]).sort((a, b) => a.localeCompare(b, "en"));
  res.json({ makes });
}

// クエリ: /api/years?category=car&make=Toyota
function handleGetYears(req: Request, res: Response) {
  const cat = String(req.query.category || "");
  const make = String(req.query.make || "");
  if (!assertCategory(cat)) return res.status(400).json({ message: "bad category" });
  const byMake = INDEX[cat][make];
  if (!byMake) return res.json({ years: [] });
  const years = Object.keys(byMake)
    .map((y) => parseInt(y, 10))
    .filter((y) => !Number.isNaN(y) && y <= 2000)
    .sort((a, b) => b - a); // 新しい年→古い年
  res.json({ years });
}

// クエリ: /api/models?category=car&make=Toyota&year=1999
function handleGetModels(req: Request, res: Response) {
  const cat = String(req.query.category || "");
  const make = String(req.query.make || "");
  const year = String(req.query.year || "");
  if (!assertCategory(cat)) return res.status(400).json({ message: "bad category" });

  const y = parseInt(year, 10);
  if (Number.isNaN(y) || y > 2000) return res.status(400).json({ message: "year must be <= 2000" });

  const list = INDEX[cat]?.[make]?.[year] || [];
  res.json({ models: list });
}

// ここで他のAPIも追加できるように一箇所で登録
export async function registerRoutes(app: Express) {
  // API
  app.get("/api/makes", handleGetMakes);
  app.get("/api/years", handleGetYears);
  app.get("/api/models", handleGetModels);

  // ここで必要なら /api/health なども
  app.get("/api/health", (_req, res) => res.json({ ok: true }));

  // http.Server を返す（server/index.tsの設計に合わせる）
  const server = createServer(app);
  return server;
}
